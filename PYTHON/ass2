import np

def forward_difference_table(x, y):
    n = len(y)
    diff_table = np.zeros((n, n))
    diff_table[:, 0] = y
    
    for j in range(1, n):
        for i in range(n - j):
            diff_table[i][j] = diff_table[i+1][j-1] - diff_table[i][j-1]
    
    return diff_table

def backward_difference_table(x, y):
    n = len(y)
    diff_table = np.zeros((n, n))
    diff_table[:, 0] = y
    
    for j in range(1, n):
        for i in range(n-1, j-1, -1):
            diff_table[i][j] = diff_table[i][j-1] - diff_table[i-1][j-1]
    
    return diff_table

def newton_forward_interpolation(x, y, x_value):
    n = len(x)
    diff_table = forward_difference_table(x, y)
    h = x[1] - x[0]
    p = (x_value - x[0]) / h
    
    result = y[0]
    factorial = 1
    term = 1
    
    for i in range(1, n):
        factorial *= i
        term *= (p - (i - 1))
        result += (term * diff_table[0][i]) / factorial
    
    return result

def newton_backward_interpolation(x, y, x_value):
    n = len(x)
    diff_table = backward_difference_table(x, y)
    h = x[1] - x[0]
    p = (x_value - x[-1]) / h
    
    result = y[-1]
    factorial = 1
    term = 1
    
    for i in range(1, n):
        factorial *= i
        term *= (p + (i - 1))
        result += (term * diff_table[-1][i]) / factorial
    
    return result

# Given data
x_values = [1.7,1.8,1.9, 2.0, 2.1, 2.2, 2.3]
y_values = [5.474,6.050, 6.686, 7.389, 8.166, 9.025, 9.974]

# Values to estimate
target_x1 = 1.85
target_x2 = 2.4

# Choosing appropriate interpolation method
if target_x1 < x_values[len(x_values) // 2]:
    y_1 = newton_forward_interpolation(x_values, y_values, target_x1)
else:
    y_1 = newton_backward_interpolation(x_values, y_values, target_x1)

if target_x2 < x_values[len(x_values) // 2]:
    y_2 = newton_forward_interpolation(x_values, y_values, target_x2)
else:
    y_2 = newton_backward_interpolation(x_values, y_values, target_x2)

print(f"Estimated y at x = {target_x1}: {y_1:.4f}")
print(f"Estimated y at x = {target_x2}: {y_2:.4f}")


